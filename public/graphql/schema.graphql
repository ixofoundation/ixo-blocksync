"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node
  getAccountTokens(address: String!, name: String, allEntityRetired: Boolean): JSON!
  getTokensTotalByAddress(address: String!, name: String, allEntityRetired: Boolean): JSON!
  getTokensTotalForEntities(address: String!, name: String, allEntityRetired: Boolean): JSON!
  getTokensTotalForCollection(did: String!, name: String, allEntityRetired: Boolean): JSON!
  getTokensTotalForCollectionAmounts(did: String!, name: String, allEntityRetired: Boolean): JSON!
  deviceExternalIdsLoaded: Boolean!
  tokenomicsSupplyTotal: JSON!
  tokenomicsSupplyCommunityPool: JSON!
  tokenomicsInflation: JSON!
  tokenomicsSupplyStaked: JSON!
  tokenomicsSupplyIBC: JSON!
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
