// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Iid
// ========================================

model IID {
  id                   String           @id
  context              Context[]
  controller           String[]
  verificationMethod   Json
  service              Service[]
  authentication       String[]
  assertionMethod      String[]
  keyAgreement         String[]
  capabilityInvocation String[]
  capabilityDelegation String[]
  linkedResource       LinkedResource[]
  linkedClaim          LinkedClaim[]
  accordedRight        AccordedRight[]
  linkedEntity         LinkedEntity[]
  alsoKnownAs          String
  metadata             Json
  Entity               Entity[]
  // VerificationMethod   VerificationMethod[]
}

model Context {
  aid Int    @id @default(autoincrement())
  key String
  val String
  IID IID    @relation(fields: [iid], references: [id])
  iid String
}

model Service {
  aid             Int    @id @default(autoincrement())
  id              String
  type            String
  serviceEndpoint String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model LinkedResource {
  aid             Int    @id @default(autoincrement())
  type            String
  id              String
  description     String
  mediaType       String
  serviceEndpoint String
  proof           String
  encrypted       String
  right           String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model LinkedClaim {
  aid             Int    @id @default(autoincrement())
  id              String
  type            String
  description     String
  serviceEndpoint String
  proof           String
  encrypted       String
  right           String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model AccordedRight {
  aid       Int    @id @default(autoincrement())
  type      String
  id        String
  mechanism String
  message   String
  service   String
  IID       IID    @relation(fields: [iid], references: [id])
  iid       String
}

model LinkedEntity {
  aid          Int    @id @default(autoincrement())
  type         String
  id           String
  relationship String
  service      String
  IID          IID    @relation(fields: [iid], references: [id])
  iid          String
}

// model VerificationMethod {
//   aid                 Int     @id @default(autoincrement())
//   id                  String
//   type                String
//   controller          String
//   blockchainAccountID String?
//   publicKeyHex        String?
//   publicKeyMultibase  String?
//   publicKeyBase58     String?
//   IID                 IID     @relation(fields: [iid], references: [id])
//   iid                 String
// }

// ========================================
// Entity
// ========================================

model Entity {
  IID            IID       @relation(fields: [id], references: [id])
  id             String    @id
  type           String
  startDate      DateTime?
  endDate        DateTime?
  status         Int
  relayerNode    String
  credentials    String[]
  entityVerified Boolean
  metadata       Json
  accounts       Json[]
  externalId     String?
  owner          String?
}

// model EntityMetadata {
//   versionId String
//   created   DateTime?
//   updated   DateTime?
//   Entity    Entity    @relation(fields: [id], references: [id])
//   id        String    @unique
// }

// model EntityAccount {
//   aid     Int    @id @default(autoincrement())
//   name    String
//   address String
//   Entity  Entity @relation(fields: [id], references: [id])
//   id      String
// }

// ========================================
// Claims
// ========================================

model ClaimCollection {
  id        String    @id
  entity    String
  admin     String
  protocol  String
  startDate DateTime?
  endDate   DateTime?
  quota     Int
  count     Int
  evaluated Int
  approved  Int
  rejected  Int
  disputed  Int
  state     Int
  payments  Json
  Claim     Claim[]
}

model Claim {
  aid             Int             @id @default(autoincrement())
  claimId         String          @unique
  agentDid        String
  agentAddress    String
  submissionDate  DateTime?
  paymentsStatus  Json
  ClaimCollection ClaimCollection @relation(fields: [collectionId], references: [id])
  collectionId    String
  schemaType      String?
  evaluation      Evaluation?
}

model Evaluation {
  aid               Int       @id @default(autoincrement())
  collectionId      String
  oracle            String
  agentDid          String
  agentAddress      String
  status            Int
  reason            Int
  verificationProof String?
  amount            Json[]
  evaluationDate    DateTime?
  Claim             Claim     @relation(fields: [claimId], references: [claimId])
  claimId           String    @unique
}

model Dispute {
  proof     String @id
  subjectId String
  type      Int
  data      Json
}

// ========================================
// Tokens
// ========================================

model TokenClass {
  contractAddress String           @id
  minter          String
  class           String
  name            String           @unique
  description     String
  image           String
  type            String
  cap             String
  supply          String
  paused          Boolean
  stopped         Boolean
  Token           Token[]
  retired         TokenRetired[]
  cancelled       TokenCancelled[]
}

model Token {
  id               String             @id
  index            String
  name             String
  collection       String
  tokenData        TokenData[]
  tokenTransaction TokenTransaction[]
  tokenClass       TokenClass         @relation(fields: [name], references: [name])
}

model TokenData {
  aid       Int     @id @default(autoincrement())
  uri       String
  encrypted Boolean
  proof     String
  type      String
  id        String
  Token     Token   @relation(fields: [tokenId], references: [id])
  tokenId   String
}

model TokenRetired {
  aid          Int        @id @default(autoincrement())
  id           String
  reason       String
  jurisdiction String
  amount       String
  owner        String
  Token        TokenClass @relation(fields: [name], references: [name])
  name         String
}

model TokenCancelled {
  aid    Int        @id @default(autoincrement())
  id     String
  reason String
  amount String
  owner  String
  Token  TokenClass @relation(fields: [name], references: [name])
  name   String
}

model TokenTransaction {
  id      Int    @id @default(autoincrement())
  from    String
  to      String
  amount  String
  Token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String
}

// ========================================
// Bonds
// ========================================

model Bond {
  bondDid                      String   @id
  state                        String
  token                        String
  name                         String
  description                  String
  functionType                 String
  functionParameters           Json[]
  creatorDid                   String
  controllerDid                String
  reserveTokens                String[]
  txFeePercentage              String
  exitFeePercentage            String
  feeAddress                   String
  reserveWithdrawalAddress     String
  maxSupply                    Json?
  orderQuantityLimits          Json[]
  sanityRate                   String
  sanityMarginPercentage       String
  currentSupply                Json?
  currentReserve               Json[]
  availableReserve             Json[]
  currentOutcomePaymentReserve Json[]
  allowSells                   Boolean
  allowReserveWithdrawals      Boolean
  alphaBond                    Boolean
  batchBlocks                  String
  outcomePayment               String
  oracleDid                    String

  BondBuy  BondBuy[]
  BondSell BondSell[]
  BondSwap BondSwap[]

  ShareWithdrawal   ShareWithdrawal[]
  ReserveWithdrawal ReserveWithdrawal[]
  OutcomePayment    OutcomePayment[]
  AlphaChange       BondAlpha[]

  // PriceEntry PriceEntry[]
}

model BondBuy {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  maxPrices  Json[]
  height     Int
  timestamp  DateTime
}

model BondSell {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  height     Int
  timestamp  DateTime
}

model BondSwap {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  toToken    String
  height     Int
  timestamp  DateTime
}

model ReserveWithdrawal {
  id                       Int      @id @default(autoincrement())
  bond                     Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid                  String
  withdrawerDid            String
  withdrawerAddress        String
  amount                   Json[]
  reserveWithdrawalAddress String
  height                   Int
  timestamp                DateTime
}

model ShareWithdrawal {
  id               Int      @id @default(autoincrement())
  bond             Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid          String
  recipientDid     String
  recipientAddress String
  amount           Json[]
  height           Int
  timestamp        DateTime
}

model OutcomePayment {
  id            Int      @id @default(autoincrement())
  bond          Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  senderDid     String
  senderAddress String
  amount        Json[]
  height        Int
  timestamp     DateTime
}

model BondAlpha {
  id        Int      @id @default(autoincrement())
  bond      Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid   String
  alpha     String
  oracleDid String
  height    Int
  timestamp DateTime
}

// model PriceEntry {
//   id      Int      @id @default(autoincrement())
//   bond    Bond     @relation(fields: [bondDid], references: [bondDid])
//   bondDid String
//   time    DateTime
//   denom   String
//   price   Decimal
// }

// ========================================
// General
// ========================================

model Chain {
  chainId     String @id
  blockHeight Int
}

model Event {
  id          Int      @id @default(autoincrement())
  type        String
  attributes  Json[]
  blockHeight Int
  timestamp   DateTime
}

model Transaction {
  hash      String    @id
  height    Int
  code      Int
  fee       Json
  gasUsed   String
  gasWanted String
  time      DateTime
  messages  Message[]
}

model Message {
  id              Int         @id @default(autoincrement())
  Transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String
  typeUrl         String
  value           Json
  from            String?
  to              String?
  denoms          String[]
  tokenNames      String[]
}

model Block {
  height           Int      @id
  hash             String
  num_txs          Int      @default(0)
  total_gas        Int      @default(0)
  proposer_address String
  timestamp        DateTime
}

// ========================================
// IPFS
// ========================================
model Ipfs {
  cid         String @id
  contentType String
  data        String
}
