// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Storage {
  cid  String @id
  name String
  ipfs String
}

model IID {
  id                   String               @id
  versionId            String               @default(uuid())
  updated              DateTime
  created              DateTime
  deactivated          Boolean?
  entityType           String?
  startDate            DateTime?
  endDate              DateTime?
  status               Int?
  stage                String?
  relayerNode          String?
  verifiableCredential String?
  credentials          String[]
  Controller           String[]
  Context              Json[]
  VerificationMethod   VerificationMethod[]
  Service              Service[]
  AccordedRight        AccordedRight[]
  LinkedResource       LinkedResource[]
  LinkedEntity         LinkedEntity[]
}

model VerificationMethod {
  id                   String   @id
  IID                  IID      @relation(fields: [iid], references: [id])
  iid                  String
  relationships        String[]
  type                 String
  controller           String
  verificationMaterial String
}

model Service {
  id              String @id
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
  type            String
  serviceEndpoint String
}

model AccordedRight {
  id        String @id
  IID       IID    @relation(fields: [iid], references: [id])
  iid       String
  type      String
  mechanism String
  service   String
}

model LinkedResource {
  id              String @id
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
  type            String
  description     String
  mediaType       String
  serviceEndpoint String
  proof           String
  encrypted       String
  right           String
}

model LinkedEntity {
  id           String @id
  IID          IID    @relation(fields: [iid], references: [id])
  iid          String
  relationship String
}

model Bond {
  bondDid                  String              @id
  status                   String?
  token                    String
  name                     String
  description              String
  functionType             String
  functionParamaters       Json?
  creatorDid               String
  controllerDid            String
  reserveTokens            String[]
  txFeePercentage          String
  exitFeePercentage        String
  feeAddress               String
  reserveWithdrawalAddress String
  maxSupply                Json?
  orderQuantityLimits      Json?
  sanityRate               String
  sanityMarginPercentage   String
  allowSells               Boolean
  allowReserveWithdrawals  Boolean
  alphaBond                Boolean
  batchBlocks              String
  creatorAddress           String
  editorDid                String?
  editorAddress            String?
  PriceEntry               PriceEntry[]
  AlphaChange              Alpha[]
  BondBuy                  BondBuy[]
  ShareWithdrawal          ShareWithdrawal[]
  ReserveWithdrawal        ReserveWithdrawal[]
  OutcomePayment           OutcomePayment[]
  BondSell                 BondSell[]
  BondSwap                 BondSwap[]
}

model PriceEntry {
  id      Int      @id @default(autoincrement())
  bond    Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid String
  time    DateTime
  denom   String
  price   Decimal
}

model BondBuy {
  id           Int    @id @default(autoincrement())
  bond         Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid      String
  buyerDid     String
  buyerAddress String
  amount       String
  maxPrices    Json?
}

model BondSell {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  sellerDid     String
  sellerAddress String
  amount        String
}

model BondSwap {
  id             Int    @id @default(autoincrement())
  bond           Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid        String
  swapperDid     String
  swapperAddress String
  from           Json?
  toToken        String
}

model Alpha {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  alpha         String
  delta         String
  oracleDid     String
  oracleAddress String
  height        String
  timestamp     String
}

model OutcomePayment {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  senderDid     String
  senderAddress String
  amount        String
  height        String
  timestamp     String
}

model ReserveWithdrawal {
  id                Int    @id @default(autoincrement())
  bond              Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid           String
  withdrawerDid     String
  withdrawerAddress String
  amount            Json?
  height            String
  timestamp         String
}

model ShareWithdrawal {
  id               Int    @id @default(autoincrement())
  bond             Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid          String
  recipientDid     String
  recipientAddress String
  height           String
  timestamp        String
}

model Chain {
  chainId     String @id
  blockHeight Int

  @@index([chainId])
}

model Event {
  id          Int      @id @default(autoincrement())
  type        String
  attributes  Json[]
  blockHeight Int
  timestamp   DateTime

  @@index([type])
}

model Stats {
  id                    Int      @id @default(autoincrement())
  totalServiceProviders Int
  totalProjects         Int
  totalEvaluationAgents Int
  totalInvestors        Int
  totalClaims           Int
  successfulClaims      Int
  submittedClaims       Int
  pendingClaims         Int
  rejectedClaims        Int
  claimLocations        String[]
}

model Project {
  projectDid              String   @id
  txHash                  String
  senderDid               String
  pubKey                  String
  data                    Json?
  projectAddress          String
  status                  String?
  entityType              String?
  createdOn               DateTime
  createdBy               String
  successfulClaims        Int
  rejectedClaims          Int
  evaluators              Int
  evaluatorsPending       Int
  serviceProviders        Int
  serviceProvidersPending Int
  investors               Int
  investorsPending        Int
  Agent                   Agent[]
  Claim                   Claim[]

  @@index([projectDid])
}

model Agent {
  id         Int     @id @default(autoincrement())
  agentDid   String
  project    Project @relation(fields: [projectDid], references: [projectDid])
  projectDid String
  status     String
  role       String
}

model Claim {
  claimId         String  @id
  project         Project @relation(fields: [projectDid], references: [projectDid])
  projectDid      String
  claimTemplateId String
  status          String
}

model PaymentTemplate {
  id             String @id
  paymentAmount  Json?
  paymentMinimum Json?
  paymentMaximum Json?
  discounts      Json?
  creatorDid     String
  creatorAddress String
}

model PaymentContract {
  id                String         @id
  paymentTemplateId String
  payer             String
  recipients        Json?
  canDeauthorise    Boolean
  authorised        Boolean?
  payerDid          String?
  effected          Boolean?
  senderDid         String?
  creatorDid        String
  creatorAddress    String
  Subscription      Subscription[]
  Discount          Discount[]
}

model Subscription {
  id                String          @id
  paymentContract   PaymentContract @relation(fields: [paymentContractId], references: [id])
  paymentContractId String
  maxPeriods        String
  period            Json?
  creatorDid        String
  creatorAddress    String
}

model Discount {
  id                String          @id
  paymentContract   PaymentContract @relation(fields: [paymentContractId], references: [id])
  paymentContractId String
  recipient         String
  granter           String
  revoked           Boolean?
  revoker           String?
}

model Transaction {
  id            Int     @id @default(autoincrement())
  blockHeight   Int
  type          String
  from          String?
  value         Json?
  fee           Json?
  signatures    Json?
  memo          String
  timeoutHeight String
}

model Block {
  height           Int      @id
  hash             String
  num_txs          Int      @default(0)
  total_gas        Int      @default(0)
  proposer_address String?
  timestamp        DateTime

  @@index([hash])
  @@index([proposer_address])
}

model WasmCode {
  code_id       Int    @id
  creator       String @default("")
  creation_time String @default("")
  height        Int

  @@index([creator])
}

model WasmContract {
  address       String @id
  code_id       Int
  creator       String @default("")
  admin         String @default("")
  label         String @default("")
  creation_time String @default("")
  height        Int
  json          Json?  @default("{}")

  @@index([code_id])
  @@index([creator])
}

model ExecMsg {
  id      Int    @id @default(autoincrement())
  sender  String
  address String
  funds   Json?
  json    Json?
}
