// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Iid
// ========================================

model IID {
  id                   String           @id
  context              Context[]
  controller           String[]
  verificationMethod   Json?
  service              Service[]
  authentication       String[]
  assertionMethod      String[]
  keyAgreement         String[]
  capabilityInvocation String[]
  capabilityDelegation String[]
  linkedResource       LinkedResource[]
  linkedClaim          LinkedClaim[]
  accordedRight        AccordedRight[]
  linkedEntity         LinkedEntity[]
  alsoKnownAs          String
  metadata             Json?
  Entity               Entity[]
}

model Context {
  aid Int    @id @default(autoincrement())
  key String
  val String
  IID IID    @relation(fields: [iid], references: [id])
  iid String
}

model Service {
  aid             Int    @id @default(autoincrement())
  id              String
  type            String
  serviceEndpoint String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model LinkedResource {
  aid             Int    @id @default(autoincrement())
  type            String
  id              String
  description     String
  mediaType       String
  serviceEndpoint String
  proof           String
  encrypted       String
  right           String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model LinkedClaim {
  aid             Int    @id @default(autoincrement())
  id              String
  type            String
  description     String
  serviceEndpoint String
  proof           String
  encrypted       String
  right           String
  IID             IID    @relation(fields: [iid], references: [id])
  iid             String
}

model AccordedRight {
  aid       Int    @id @default(autoincrement())
  type      String
  id        String
  mechanism String
  message   String
  service   String
  IID       IID    @relation(fields: [iid], references: [id])
  iid       String
}

model LinkedEntity {
  aid          Int    @id @default(autoincrement())
  type         String
  id           String
  relationship String
  service      String
  IID          IID    @relation(fields: [iid], references: [id])
  iid          String
}

// model IidMetadata {
//   aid         Int       @id @default(autoincrement())
//   versionId   String
//   created     DateTime?
//   updated     DateTime?
//   deactivated Boolean
//   IID         IID       @relation(fields: [iid], references: [id])
//   iid         String
// }

// model VerificationMethod {
//   aid                 Int     @id @default(autoincrement())
//   id                  String
//   type                String
//   controller          String
//   blockchainAccountID String?
//   publicKeyHex        String?
//   publicKeyMultibase  String?
//   publicKeyBase58     String?
//   IID                 IID     @relation(fields: [iid], references: [id])
//   iid                 String
// }

// ========================================
// Entity
// ========================================

model Entity {
  IID            IID       @relation(fields: [id], references: [id])
  id             String    @id
  type           String
  startDate      DateTime?
  endDate        DateTime?
  status         Int
  relayerNode    String
  credentials    String[]
  entityVerified Boolean
  metadata       Json?
  accounts       Json?
}

// model EntityMetadata {
//   versionId String
//   created   DateTime?
//   updated   DateTime?
//   Entity    Entity    @relation(fields: [id], references: [id])
//   id        String    @unique
// }

// model EntityAccount {
//   aid     Int    @id @default(autoincrement())
//   name    String
//   address String
//   Entity  Entity @relation(fields: [id], references: [id])
//   id      String
// }

// ========================================
// Claims
// ========================================

model ClaimCollection {
  id        String    @id
  entity    String
  admin     String
  protocol  String
  startDate DateTime?
  endDate   DateTime?
  quota     Int
  count     Int
  evaluated Int
  approved  Int
  rejected  Int
  disputed  Int
  state     Int //maybe string?
  payments  Json?
  Claim     Claim[]
}

model Claim {
  claimId         String          @id
  agentDid        String
  agentAddress    String
  submissionDate  DateTime?
  evaluation      Json?
  paymentsStatus  Json?
  ClaimCollection ClaimCollection @relation(fields: [collectionId], references: [id])
  collectionId    String
}

model Dispute {
  proof     String @id
  subjectId String
  type      Int
  data      Json?
}

// ========================================
// Tokens
// ========================================

model TokenClass {
  contractAddress String  @id
  minter          String
  class           String
  name            String  @unique
  description     String
  image           String
  type            String
  cap             String
  supply          String
  paused          Boolean
  stopped         Boolean
  retired         Json?
  cancelled       Json?
}

model Token {
  id         String      @id
  index      String
  name       String
  collection String
  tokenData  TokenData[]
}

model TokenData {
  aid       Int     @id @default(autoincrement())
  uri       String
  encrypted Boolean
  proof     String
  type      String
  id        String
  Token     Token   @relation(fields: [tokenId], references: [id])
  tokenId   String
}

// ========================================
// Bonds
// ========================================

model Bond {
  bondDid                  String              @id
  status                   String?
  token                    String
  name                     String
  description              String
  functionType             String
  functionParamaters       Json?
  creatorDid               String
  controllerDid            String
  reserveTokens            String[]
  txFeePercentage          String
  exitFeePercentage        String
  feeAddress               String
  reserveWithdrawalAddress String
  maxSupply                Json?
  orderQuantityLimits      Json?
  sanityRate               String
  sanityMarginPercentage   String
  allowSells               Boolean?
  allowReserveWithdrawals  Boolean?
  alphaBond                Boolean?
  batchBlocks              String
  creatorAddress           String
  editorDid                String?
  editorAddress            String?
  PriceEntry               PriceEntry[]
  AlphaChange              Alpha[]
  BondBuy                  BondBuy[]
  ShareWithdrawal          ShareWithdrawal[]
  ReserveWithdrawal        ReserveWithdrawal[]
  OutcomePayment           OutcomePayment[]
  BondSell                 BondSell[]
  BondSwap                 BondSwap[]
}

model PriceEntry {
  id      Int      @id @default(autoincrement())
  bond    Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid String
  time    DateTime
  denom   String
  price   Decimal
}

model BondBuy {
  id           Int    @id @default(autoincrement())
  bond         Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid      String
  buyerDid     String
  buyerAddress String
  amount       String
  maxPrices    Json?
}

model BondSell {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  sellerDid     String
  sellerAddress String
  amount        String
}

model BondSwap {
  id             Int    @id @default(autoincrement())
  bond           Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid        String
  swapperDid     String
  swapperAddress String
  from           Json?
  toToken        String
}

model Alpha {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  alpha         String
  delta         String
  oracleDid     String
  oracleAddress String
  height        String
  timestamp     String
}

model OutcomePayment {
  id            Int    @id @default(autoincrement())
  bond          Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  senderDid     String
  senderAddress String
  amount        String
  height        String
  timestamp     String
}

model ReserveWithdrawal {
  id                Int    @id @default(autoincrement())
  bond              Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid           String
  withdrawerDid     String
  withdrawerAddress String
  amount            Json?
  height            String
  timestamp         String
}

model ShareWithdrawal {
  id               Int    @id @default(autoincrement())
  bond             Bond   @relation(fields: [bondDid], references: [bondDid])
  bondDid          String
  recipientDid     String
  recipientAddress String
  height           String
  timestamp        String
}

// ========================================
// General
// ========================================

model Chain {
  chainId     String @id
  blockHeight Int
}

model Event {
  id          Int      @id @default(autoincrement())
  type        String
  attributes  Json?
  blockHeight Int
  timestamp   DateTime
}

model Stats {
  id                    Int      @id @default(autoincrement())
  totalServiceProviders Int
  totalProjects         Int
  totalEvaluationAgents Int
  totalInvestors        Int
  totalClaims           Int
  successfulClaims      Int
  submittedClaims       Int
  pendingClaims         Int
  rejectedClaims        Int
  claimLocations        String[]
}

model Transaction {
  hash      String    @id
  height    Int
  code      Int
  fee       Json?
  gasUsed   String
  gasWanted String
  time      DateTime
  messages  Message[]
}

model Message {
  id              Int         @id @default(autoincrement())
  Transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String
  typeUrl         String
  value           Json?
  from            String?
  to              String?
}

model Block {
  height           Int      @id
  hash             String
  num_txs          Int      @default(0)
  total_gas        Int      @default(0)
  proposer_address String?
  timestamp        DateTime
}
