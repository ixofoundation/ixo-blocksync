// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Iid
// ========================================

model IID {
  id                   String   @id
  context              Json
  controller           String[]
  verificationMethod   Json
  service              Json
  authentication       String[]
  assertionMethod      String[]
  keyAgreement         String[]
  capabilityInvocation String[]
  capabilityDelegation String[]
  linkedResource       Json
  linkedClaim          Json
  accordedRight        Json
  linkedEntity         Json
  alsoKnownAs          String
  metadata             Json
  Entity               Entity[]
}

// ========================================
// Entity
// ========================================

model Entity {
  IID            IID          @relation(fields: [id], references: [id])
  id             String       @id
  type           String
  startDate      DateTime?
  endDate        DateTime?
  status         Int
  relayerNode    String
  credentials    String[]
  entityVerified Boolean
  metadata       Json
  accounts       Json
  externalId     String?
  owner          String?
  // adding below foreign keys relationshipa to make it easier to query
  Token          Token[]
  TokenClass     TokenClass[]

  @@index([owner, type])
}

// ========================================
// Claims
// ========================================

model ClaimCollection {
  id        String    @id
  entity    String
  admin     String
  protocol  String
  startDate DateTime?
  endDate   DateTime?
  quota     Int
  count     Int
  evaluated Int
  approved  Int
  rejected  Int
  disputed  Int
  state     Int
  payments  Json
  Claim     Claim[]
}

model Claim {
  claimId         String          @id
  agentDid        String
  agentAddress    String
  submissionDate  DateTime
  paymentsStatus  Json
  schemaType      String?
  evaluation      Evaluation?
  ClaimCollection ClaimCollection @relation(fields: [collectionId], references: [id])
  collectionId    String

  @@index([collectionId])
}

model Evaluation {
  collectionId      String
  oracle            String
  agentDid          String
  agentAddress      String
  status            Int
  reason            Int
  verificationProof String?
  amount            Json
  evaluationDate    DateTime
  Claim             Claim    @relation(fields: [claimId], references: [claimId])
  claimId           String   @id
}

model Dispute {
  proof     String @id
  subjectId String
  type      Int
  data      Json
}

// ========================================
// Tokens
// ========================================

model TokenClass {
  contractAddress String           @id
  minter          String
  Class           Entity           @relation(fields: [class], references: [id])
  class           String
  name            String           @unique
  description     String
  image           String
  type            String
  cap             BigInt
  supply          BigInt
  paused          Boolean
  stopped         Boolean
  Token           Token[]
  retired         TokenRetired[]
  cancelled       TokenCancelled[]
}

model Token {
  id               String             @id
  index            String
  name             String
  Collection       Entity             @relation(fields: [collection], references: [id])
  collection       String
  tokenData        TokenData[]
  tokenTransaction TokenTransaction[]
  tokenClass       TokenClass         @relation(fields: [name], references: [name])
  TokenRetired     TokenRetired[]

  @@index([name])
}

model TokenData {
  aid       Int     @id @default(autoincrement())
  uri       String
  encrypted Boolean
  proof     String
  type      String
  id        String
  Token     Token   @relation(fields: [tokenId], references: [id])
  tokenId   String

  @@index([tokenId])
}

model TokenRetired {
  aid          Int        @id @default(autoincrement())
  id           String
  reason       String
  jurisdiction String
  amount       BigInt
  owner        String
  Token        TokenClass @relation(fields: [name], references: [name])
  // Token to TokenClass already existed so making TokenAsset to Token to prevent breaking clients
  TokenAsset   Token      @relation(fields: [id], references: [id])
  name         String

  @@index([name, owner, id])
}

model TokenCancelled {
  aid    Int        @id @default(autoincrement())
  id     String
  reason String
  amount BigInt
  owner  String
  Token  TokenClass @relation(fields: [name], references: [name])
  name   String

  @@index([name])
}

model TokenTransaction {
  aid     Int    @id @default(autoincrement())
  from    String
  to      String
  amount  BigInt
  Token   Token  @relation(fields: [tokenId], references: [id])
  tokenId String

  @@index([from, to])
}

// ========================================
// Bonds
// ========================================

model Bond {
  bondDid                      String   @id
  state                        String
  token                        String
  name                         String
  description                  String
  functionType                 String
  functionParameters           Json
  creatorDid                   String
  controllerDid                String
  reserveTokens                String[]
  txFeePercentage              String
  exitFeePercentage            String
  feeAddress                   String
  reserveWithdrawalAddress     String
  maxSupply                    Json?
  orderQuantityLimits          Json
  sanityRate                   String
  sanityMarginPercentage       String
  currentSupply                Json?
  currentReserve               Json
  availableReserve             Json
  currentOutcomePaymentReserve Json
  allowSells                   Boolean
  allowReserveWithdrawals      Boolean
  alphaBond                    Boolean
  batchBlocks                  String
  outcomePayment               String
  oracleDid                    String

  BondBuy  BondBuy[]
  BondSell BondSell[]
  BondSwap BondSwap[]

  ShareWithdrawal   ShareWithdrawal[]
  ReserveWithdrawal ReserveWithdrawal[]
  OutcomePayment    OutcomePayment[]
  AlphaChange       BondAlpha[]

  // PriceEntry PriceEntry[]
}

model BondBuy {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  maxPrices  Json
  height     Int
  timestamp  DateTime
}

model BondSell {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  height     Int
  timestamp  DateTime
}

model BondSwap {
  id         Int      @id @default(autoincrement())
  bond       Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid    String
  accountDid String
  amount     Json
  toToken    String
  height     Int
  timestamp  DateTime
}

model ReserveWithdrawal {
  id                       Int      @id @default(autoincrement())
  bond                     Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid                  String
  withdrawerDid            String
  withdrawerAddress        String
  amount                   Json
  reserveWithdrawalAddress String
  height                   Int
  timestamp                DateTime
}

model ShareWithdrawal {
  id               Int      @id @default(autoincrement())
  bond             Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid          String
  recipientDid     String
  recipientAddress String
  amount           Json
  height           Int
  timestamp        DateTime
}

model OutcomePayment {
  id            Int      @id @default(autoincrement())
  bond          Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid       String
  senderDid     String
  senderAddress String
  amount        Json
  height        Int
  timestamp     DateTime
}

model BondAlpha {
  id        Int      @id @default(autoincrement())
  bond      Bond     @relation(fields: [bondDid], references: [bondDid])
  bondDid   String
  alpha     String
  oracleDid String
  height    Int
  timestamp DateTime
}

// model PriceEntry {
//   id      Int      @id @default(autoincrement())
//   bond    Bond     @relation(fields: [bondDid], references: [bondDid])
//   bondDid String
//   time    DateTime
//   denom   String
//   price   Decimal
// }

// ========================================
// General
// ========================================

model Chain {
  chainId     String @id
  blockHeight Int
}

model Transaction {
  hash      String    @id
  height    Int
  code      Int
  fee       Json
  gasUsed   String
  gasWanted String
  time      DateTime
  memo      String    @default("")
  messages  Message[]

  @@index([height])
}

model Message {
  id              Int         @id @default(autoincrement())
  typeUrl         String
  value           Json
  from            String?
  to              String?
  denoms          String[]
  tokenNames      String[]
  Transaction     Transaction @relation(fields: [transactionHash], references: [hash])
  transactionHash String

  @@index([transactionHash, from, to])
}

// ========================================
// IPFS
// ========================================
model Ipfs {
  cid         String @id
  contentType String
  data        String
}

// ========================================
// Tokenomics
// ========================================
model TokenomicsAccount {
  address            String  @id
  accountNumber      Int
  availBalance       BigInt
  delegationsBalance BigInt
  rewardsBalance     BigInt
  totalBalance       BigInt
  type               String?
}
